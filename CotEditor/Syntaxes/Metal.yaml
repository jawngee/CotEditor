extensions:
- keyString: "c++"
- keyString: "cpp"
- keyString: "cxx"
- keyString: "cc"
- keyString: "hpp"
- keyString: "h"
- keyString: "metal"
metadata:
  author: "1024jp"
  distributionURL: "https://coteditor.com"
  version: "1.0.1"
  description: ""
  license: "Same as CotEditor"
lastModified: "2018-10-07"
keywords:
- beginString: "alignas"
- beginString: "alignof"
- beginString: "and"
- beginString: "and_eq"
- beginString: "asm"
- beginString: "auto"
- beginString: "bitand"
- beginString: "bitor"
- beginString: "bool"
- beginString: "break"
- beginString: "case"
- beginString: "catch"
- beginString: "char"
- beginString: "char16_t"
- beginString: "char32_t"
- beginString: "class"
- beginString: "compl"
- beginString: "const"
- beginString: "constexpr"
- beginString: "const_cast"
- beginString: "continue"
- beginString: "decltype"
- beginString: "default"
- beginString: "delete"
- beginString: "do"
- beginString: "double"
- beginString: "dynamic_cast"
- beginString: "else"
- beginString: "enum"
- beginString: "explicit"
- beginString: "export"
- beginString: "extern"
- beginString: "false"
- beginString: "float"
- beginString: "float4"
- beginString: "sampler"
- beginString: "for"
- beginString: "friend"
- beginString: "goto"
- beginString: "if"
- beginString: "inline"
- beginString: "int"
- beginString: "long"
- beginString: "mutable"
- beginString: "namespace"
- beginString: "new"
- beginString: "noexcept"
- beginString: "not"
- beginString: "not_eq"
- beginString: "nullptr"
- beginString: "operator"
- beginString: "or"
- beginString: "or_eq"
- beginString: "private"
- beginString: "protected"
- beginString: "public"
- beginString: "register"
- beginString: "reinterpret_cast"
- beginString: "return"
- beginString: "short"
- beginString: "signed"
- beginString: "sizeof"
- beginString: "static"
- beginString: "static_assert"
- beginString: "static_cast"
- beginString: "struct"
- beginString: "switch"
- beginString: "template"
- beginString: "this"
- beginString: "thread_local"
- beginString: "throw"
- beginString: "true"
- beginString: "try"
- beginString: "typedef"
- beginString: "typeid"
- beginString: "typename"
- beginString: "union"
- beginString: "unsigned"
- beginString: "using"
- beginString: "virtual"
- beginString: "void"
- beginString: "volatile"
- beginString: "wchar_t"
- beginString: "while"
- beginString: "xor"
- beginString: "xor_eq"
types:
- beginString: "short"
- beginString: "short2"
- beginString: "short3"
- beginString: "short4"
- beginString: "packed_short2"
- beginString: "packed_short3"
- beginString: "packed_short4"
- beginString: "ushort"
- beginString: "ushort2"
- beginString: "ushort3"
- beginString: "ushort4"
- beginString: "packed_ushort2"
- beginString: "packed_ushort3"
- beginString: "packed_ushort4"
- beginString: "long"
- beginString: "signed"
- beginString: "unsigned"
- beginString: "char"
- beginString: "char2"
- beginString: "char3"
- beginString: "char4"
- beginString: "packed_char2"
- beginString: "packed_char3"
- beginString: "packed_char4"
- beginString: "uchar"
- beginString: "uchar2"
- beginString: "uchar3"
- beginString: "uchar4"
- beginString: "packed_uchar2"
- beginString: "packed_uchar3"
- beginString: "packed_uchar4"
- beginString: "bool"
- beginString: "bool2"
- beginString: "bool3"
- beginString: "bool4"
- beginString: "wchar_t"
- beginString: "char16_t"
- beginString: "char32_t"
- beginString: "int"
- beginString: "int2"
- beginString: "int3"
- beginString: "int4"
- beginString: "packed_int2"
- beginString: "packed_int3"
- beginString: "packed_int4"
- beginString: "float"
- beginString: "float2"
- beginString: "float3"
- beginString: "float4"
- beginString: "float2x2"
- beginString: "float2x3"
- beginString: "float2x4"
- beginString: "float3x2"
- beginString: "float3x3"
- beginString: "float3x4"
- beginString: "float4x2"
- beginString: "float4x3"
- beginString: "float4x4"
- beginString: "packed_float2"
- beginString: "packed_float3"
- beginString: "packed_float4"
- beginString: "half"
- beginString: "half2"
- beginString: "half3"
- beginString: "half4"
- beginString: "half2x2"
- beginString: "half2x3"
- beginString: "half2x4"
- beginString: "half3x2"
- beginString: "half3x3"
- beginString: "half3x4"
- beginString: "half4x2"
- beginString: "half4x3"
- beginString: "half4x4"
- beginString: "packed_half2"
- beginString: "packed_half3"
- beginString: "packed_half4"
- beginString: "sampler"
- beginString: "sampler_h"
- beginString: "sample_t"
- beginString: "sample_h"
- beginString: "double"
- beginString: "destination"
- beginString: "group::destination"
- beginString: "group::destination_h"
attributes:
- beginString: "#define"
- beginString: "#elif"
- beginString: "#else"
- beginString: "#endif"
- beginString: "#error"
- beginString: "#if"
- beginString: "#ifdef"
- beginString: "#ifndef"
- beginString: "#include"
- beginString: "#line"
- beginString: "#pragma"
- beginString: "#undef"
commands:
- beginString: "mix"
- beginString: "compare"
- beginString: "sin"
- beginString: "cos"
- beginString: "sincos"
- beginString: "cossin"
- beginString: "premultiply"
- beginString: "unpremultiply"
- beginString: "srgb_to_linear"
- beginString: "linear_to_srgb"
- beginString: "coord"
- beginString: "write"
- beginString: "sample"
- beginString: "transform"
- beginString: "extent"
- beginString: "origin"
- beginString: "size"
- beginString: "gatherX"
- beginString: "gatherY"
- beginString: "gatherZ"
- beginString: "gatherW"
attributes: []
values:
- beginString: "false"
- beginString: "NULL"
- beginString: "true"
variables:
- beginString: "this"
numbers:
- beginString: "0"
  description: "zero"
- beginString: "\\b-?[1-9][0-9]*l?\\b"
  regularExpression: true
  ignoreCase: true
  description: "integer"
- beginString: "\\b-?\\d+\\.\\d+(e[-+]?\\d+)?[lf]?\\b"
  regularExpression: true
  ignoreCase: true
  description: "float"
- beginString: "\\b0[1-7][0-7]*+l?\\b"
  regularExpression: true
  ignoreCase: true
  description: "octal"
- beginString: "\\b0x[0-9a-f]+l?\\b"
  regularExpression: true
  ignoreCase: true
  description: "hex"
strings:
- beginString: "\""
  endString: "\""
- beginString: "L\""
- beginString: "(?<=#include)[\\t ]*<.+>"
  regularExpression: true
characters:
- beginString: "'"
  endString: "'"
comments: []
commentDelimiters:
  endDelimiter: "*/"
  beginDelimiter: "/*"
  inlineDelimiter: "//"
outlineMenu:
- beginString: "^([\\t ]*)(\\w+::\\w+)\\s*\\(([\\s\\w*&,\\[\\]]*)\\)"
  keyString: "$1$2($3)"
  description: "constructor"
- beginString: "^([\\t ]*)(\\w+::~\\w+)\\s*\\(\\)"
  keyString: "$1$2()"
  description: "deconstructor"
- beginString: "^([\\t ]*)(\\w[\\w\\s]*)\\s+(\\**\\w+)\\(([\\s\\w*&,\\[\\]]*)\\)[\\t
    ]*(?=\\{|//|$)"
  keyString: "$1 $3($4)"
  description: "function"
- beginString: "^([\\t ]*)(\\w[\\w\\s]*)\\s+(\\**\\w+::\\w+)\\(([\\s\\w*&,]*)\\)[\\t
    ]*(?=\\{|//|$)"
  keyString: "$1 $3($4)"
  description: "method"
- beginString: "^class[\\t ]+(\\w+)"
  bold: true
  keyString: "$1"
  description: "class"
- beginString: "^enum[\\t ]+(\\w+)"
  italic: true
  description: "enum"
  keyString: "enum $1"
- beginString: "^struct[\\t ]+(\\w+)"
  keyString: "struct $1"
  description: "struct"
  italic: true
- beginString: "^typedef (enum|struct|union)\\s*\\{[^}]*\\}[\\\\t ]*(\\w+);"
  keyString: "$1 $2"
  description: "typedef enum/struct/union"
  italic: true
- beginString: "^union[\\t ]+(\\w+)"
  description: "union"
  italic: true
  keyString: "union $1"
